22c22
<     utils  = require(__base + 'sharedUtils/sharedUtils.js');
---
>     utils  = require(__base + '/sharedUtils/sharedUtils.js');
34,35c34,35
<     role1 : 'sketcher',
<     role2 : 'viewer'
---
>     role1 : 'speaker',
>     role2 : 'listener'
37,40c37,39
< 
< 
<   //Dimensions of world in pixels and number of cells to be divided into;
<   this.numHorizontalCells = 4;
---
>   
>   //Dimensions of world in pixels and numberof cells to be divided into;
>   this.numHorizontalCells = 3;
42c41
<   this.cellDimensions = {height : 200, width : 200}; // in pixels
---
>   this.cellDimensions = {height : 300, width : 300}; // in pixels
49,72c48
< 
<   // track shift key drawing tool use 
<   this.shiftKeyUsed = 0; // "1" on trials where used, "0" otherwise
< 
<   // define dbname and colname
<   this.dbname = 'visual_pragmatics';
<   this.colname = 'test';
< 
<   // Number of total poses per object
<   this.numPoses = 40;          
< 
<   // Which stroke number are we on?  
<   this.currStrokeNum = 0;  
< 
<   // Is the sketcher done with their drawing?
<   this.doneDrawing = false;
< 
<   // Is the sketcher allowed to draw?
<   this.drawingAllowed = false;
< 
<   // time (in ms) to wait before giving feedback
<   this.feedbackDelay = 300;
< 
<   // Which round (a.k.a. "trial") are we on (initialize at -1 so that first round is 0-indexed)
---
>   // Which round are we on (initialize at -1 so that first round is 0-indexed)
76,79c52
<   this.numRounds = 32;
< 
<   // How many objects per round (how many items in the menu)?
<   this.numItemsPerRound = this.numHorizontalCells*this.numVerticalCells;
---
>   this.numRounds = 50;
81,82c54,55
<   // Items x Rounds?
<   this.numItemsxRounds = this.numItemsPerRound*this.numRounds;
---
>   // How many mistakes have the pair made on the current trial?
>   this.attemptNum = 0;
84c57
<   // This will be populated with the set of objects
---
>   // This will be populated with the tangram set
88d60
<     console.log('sent server update bc satisfied this.server')
98c70
<       catch_trials : [], system : {},
---
>       catch_trials : [], system : {}, 
100c72
< 	gameID: this.id,
---
>         gameID: this.id,
131,133c103
< if('undefined' != typeof global) {  
<   var stimList = _.map(require('./stimList_subord_2', _.clone)); 
<   // console.log(stimList);
---
> if('undefined' != typeof global) {
166,167c136
<     // console.log('got to newRound in game.core.js and not the final round');
<     // Otherwise, get the preset list of objects for the new round
---
>     // Otherwise, get the preset list of tangrams for the new round
170d138
<     this.objects = this.trialList[this.roundNum];
175,263c143,148
< game_core.prototype.getRandomizedConditions = function() {  
<   ///// April 8: implementing re-design
< 
<   var condition = new Array; 
<   var category = new Array;
<   var object = new Array;
<   var pose = new Array;
<   var target = new Array; // target assignment
< 
<   var numCats = 4;
<   var numObjs = 8; 
<   // make randomization matrix: take 4x8 matrix with range(0,8) on the rows, and indpt shuffle within row  
<   var tmp = new Array;
<   for (i=0;i<numCats;i++) {
<     tmp.push(_.shuffle(_.range(0,8)));
<   }
<   
<   // So now we generate the 8 unique menus:
<   // First, take left 4x4 matrix and define each column to be 4 different "menus" 
<   var menuList = new Array;
<   for (i=0;i<numCats;i++) { 
<     _menu = new Array;
<     for (j=0;j<numCats;j++) { 
<       _menu.push(tmp[j][i])
<     } 
<     menuList.push(_menu);      
<   }
<   // Then, take right 4x4 matrix and define each row to be 4 different "menus"
<   // this way, each object is drawn exactly once, and objects always appear with the same distractors
<   for (i=0;i<numObjs-numCats;i++) {
<     menuList.push(tmp[i].slice(4,8));
<   }
< 
<   // copy four times to get the object matrix 
<   _object = menuList.concat(menuList).concat(menuList).concat(menuList);
< 
<   // now let's make the category matrix
<   arr = new Array;
<   _(4).times(function(n){arr.push(_.range(0,4))});
<   tmp = _.range(0,4);
<   for (i=0;i<tmp.length;i++) {
<     arr.push(_.times(4, function() { return tmp[i]; }));
<   }
< 
<   // copy 4 times to get full category matrix
<   _category = arr.concat(arr).concat(arr).concat(arr);
< 
<   // now make pose matrix (on each trial, all objects share same pose, )
<   _pose = _.shuffle(_.range(this.numPoses)).slice(0,32);  
<   // for (i=0;i<_poses.length;i++) {
<   //   pose.push(_.times(4, function() { return _poses[i]; }));
<   // }
< 
<   // now make condition matrix
<   f = _.times(4,function() {return "further"});
<   c = _.times(4,function() {return "closer"});
<   tmp = f.concat(c);
<   _condition = tmp.concat(tmp).concat(tmp).concat(tmp);
< 
<   // now create target vector
<   _target = new Array;
<   for (i=0;i<4;i++) {
<     _target = _target.concat(_.times(8,function() {return i}));
<   }
< 
<   // now shuffle the rows of condition & object matrices using same set of indices
<   var _zipped;
<   _zipped = _.shuffle(_.zip(_object,_category,_pose,_condition,_target));
<   
<   for (j=0;j<_zipped.length;j++) {
<     object.push(_zipped[j][0]);
<     category.push(_zipped[j][1]);
<     pose.push(_zipped[j][2]);
<     condition.push(_zipped[j][3]);
<     target.push(_zipped[j][4]);
<   }
<   // final output: design_dict contains category, object, pose matrices (each 32x4 [rounds by item])
<   // condition: 32x1 
< 
<   design_dict = {condition:condition,
<                  category:category,
<                  object:object,                 
<                  pose:pose,
<                  target:target};
< 
< 
<   // console.log(design_dict);
<   return design_dict;  
< 
---
> game_core.prototype.getRandomizedConditions = function() {
>   var numEach = this.numRounds / 3;
>   var conditions = [].concat(utils.fillArray("equal", numEach),
> 			     utils.fillArray("closer", numEach),
> 			     utils.fillArray("further", numEach));
>   return _.shuffle(conditions);
267,272c152,153
<   var listenerLocs = _.shuffle([[1,1], [2,1], [3,1], [4,1]]);
<   var speakerLocs = _.shuffle([[1,1], [2,1], [3,1], [4,1]]);
< 
<   // // temporarily turn off shuffling to make sure that it has to do with this
<   // var listenerLocs = [[1,1], [2,1], [3,1], [4,1]];
<   // var speakerLocs = [[1,1], [2,1], [3,1], [4,1]];
---
>   var listenerLocs = _.shuffle([[1,1], [2,1], [3,1]]);
>   var speakerLocs = _.shuffle([[1,1], [2,1], [3,1]]);
276,277c157
< 
< game_core.prototype.makeTrialList = function () { 
---
> game_core.prototype.makeTrialList = function () {
279,288c159
<   var design_dict = this.getRandomizedConditions();
<   var conditionList = design_dict['condition'];
<   var categoryList = design_dict['category'];
<   var _objectList = design_dict['object'];
<   var poseList = design_dict['pose'];
<   var targetList = design_dict['target'];
< 
<   var objList = new Array;
<   var locs = new Array;
< 
---
>   var conditionList = this.getRandomizedConditions();
290,295c161,164
<   for (var i = 0; i < categoryList.length; i++) { // "i" indexes round number    
<     // sample four object images that are unique and follow the condition constraints
<     var objList = sampleTrial(i,categoryList,_objectList,poseList,targetList,conditionList);      
<     // sample locations for those objects
<     var locs = this.sampleStimulusLocs(); 
<     // construct trial list (in sets of complete rounds)
---
>   for (var i = 0; i < conditionList.length; i++) {
>     var condition = conditionList[i];
>     var objList = sampleTrial(condition); // Sample three objects 
>     var locs = this.sampleStimulusLocs(); // Sample locations for those objects
301c170
<       var listenerGridCell = local_this.getPixelFromCell(tuple[2][0], tuple[2][1]);      
---
>       var listenerGridCell = local_this.getPixelFromCell(tuple[2][0], tuple[2][1]);
303,309c172,178
<       	gridX : tuple[1][0],
<       	gridY : tuple[1][1],
<       	trueX : speakerGridCell.centerX - object.width/2,
<       	trueY : speakerGridCell.centerY - object.height/2,
<       	gridPixelX: speakerGridCell.centerX - 100,
<       	gridPixelY: speakerGridCell.centerY - 100
<             };
---
> 	gridX : tuple[1][0],
> 	gridY : tuple[1][1],
> 	trueX : speakerGridCell.centerX - object.width/2,
> 	trueY : speakerGridCell.centerY - object.height/2,
> 	gridPixelX: speakerGridCell.centerX - 150,
> 	gridPixelY: speakerGridCell.centerY - 150
>       };
311,316c180,185
<       	gridX : tuple[2][0],
<       	gridY : tuple[2][1],
<       	trueX : listenerGridCell.centerX - object.width/2,
<       	trueY : listenerGridCell.centerY - object.height/2,
<       	gridPixelX: listenerGridCell.centerX - 100,
<       	gridPixelY: listenerGridCell.centerY - 100
---
> 	gridX : tuple[2][0],
> 	gridY : tuple[2][1],
> 	trueX : listenerGridCell.centerX - object.width/2,
> 	trueY : listenerGridCell.centerY - object.height/2,
> 	gridPixelX: listenerGridCell.centerX - 150,
> 	gridPixelY: listenerGridCell.centerY - 150
319,322c188
< 
<       }));
<   
<     
---
>     }));
324d189
< 
344,346c209
<     trialInfo: this.trialInfo,
<     objects: this.objects,
<     gameID: this.id
---
>     trialInfo: this.trialInfo
351,355c214
<   if(player_packet.length == 2) {
<     _.extend(state, {objects: this.objects});
<   }
<   // console.log('printing state variable from server_send_update');
<   // console.log(state);
---
> 
362,423c221,225
< var getObjectSubset = function(basicCat) {
<   return _.map(_.shuffle(_.filter(_objectList, function(x){
<     return x.basic == basicCat;
<   })), _.clone);
< };
< 
< var getRemainingTargets = function(earlierTargets) {
<   var criticalObjs = getObjectSubset("target");
<   return _.filter(criticalObjs, function(x) {
<     return !_.contains(earlierTargets, x.name );
<   });
< };
< 
< 
< 
< 
< var sampleTrial = function(roundNum,categoryList,_objectList,poseList,targetList,conditionList) {    
<   theseCats = categoryList[roundNum];
<   theseObjs = _objectList[roundNum];
<   thisPose = poseList[roundNum];
<   thisTarget = targetList[roundNum];
<   thisCondition = conditionList[roundNum];
< 
<   var im0 = _.filter(stimList, function(s){ return ( (s['cluster']==theseCats[0]) && (s['object']==theseObjs[0]) && (s['pose']==thisPose) ) })[0];
<   var im1 = _.filter(stimList, function(s){ return ( (s['cluster']==theseCats[1]) && (s['object']==theseObjs[1]) && (s['pose']==thisPose) ) })[0];
<   var im2 = _.filter(stimList, function(s){ return ( (s['cluster']==theseCats[2]) && (s['object']==theseObjs[2]) && (s['pose']==thisPose) ) })[0];
<   var im3 = _.filter(stimList, function(s){ return ( (s['cluster']==theseCats[3]) && (s['object']==theseObjs[3]) && (s['pose']==thisPose) ) })[0]; 
< 
<   var im_all = [im0,im1,im2,im3]; 
<   var target = im_all[thisTarget]; // actual target on this trial
<   var notTargs = _.filter(_.range(4), function(x) { return x!=thisTarget});
<   var firstDistractor = im_all[notTargs[0]]; 
<   var secondDistractor = im_all[notTargs[1]];
<   var thirdDistractor = im_all[notTargs[2]];
<   _target_status = ["distractor","distractor","distractor","distractor"];
<   var target_status = _target_status[thisTarget] = "target"; 
<   _.extend(target,{target_status: "target", condition: thisCondition});
<   _.extend(firstDistractor,{target_status: "distr1", condition: thisCondition}); 
<   _.extend(secondDistractor,{target_status: "distr2", condition: thisCondition});
<   _.extend(thirdDistractor,{target_status: "distr3", condition: thisCondition});
<   return [target, firstDistractor, secondDistractor, thirdDistractor];
< 
< };
< 
< var sampleObjects = function(condition, earlierTargets) {
<   var samplingInfo = {
<     1 : {class: getObjectSubset("birds"),
<    selector: firstClassSelector},
<     2 : {class: getObjectSubset("birds"),
<    selector: secondClassSelector},
<     3 : {class: getObjectSubset("birds"),
<    selector: thirdClassSelector}
<   };
<   
<   var conditionParams = condition.slice(-2).split("");    
<   var firstDistrInfo = samplingInfo[conditionParams[0]];
<   var secondDistrInfo = samplingInfo[conditionParams[1]];
<   var remainingTargets = getRemainingTargets(earlierTargets);
<   
<   var target = _.sample(remainingTargets);
<   var firstDistractor = firstDistrInfo.selector(target, firstDistrInfo.class);
<   var secondDistractor = secondDistrInfo.selector(target, secondDistrInfo.class);
---
> var sampleTrial = function(condition) {
>   var opts = {fixedL : true};
>   var target = {color: utils.randomColor(opts), targetStatus : "target"};
>   var firstDistractor = {color: utils.randomColor(opts), targetStatus: "distr1"};
>   var secondDistractor = {color: utils.randomColor(opts), targetStatus: "distr2"};
430c232
<     return sampleObjects(condition, earlierTargets);
---
>     return sampleTrial(condition);
434,438d235
< 
< 
< 
< 
< // NOT NECESSARY FOR SKETCHPAD TASK??
458,474d254
< var firstClassSelector = function(target, list) {
<   return _.sample(_.filter(list, function(x) {
<     return target.basic === x.basiclevel;
<   }));
< };
< 
< var secondClassSelector = function(target, list) {
<   return _.sample(_.filter(list, function(x) {
<     return target.superdomain === x.superdomain;
<   }));
< };
< 
< var thirdClassSelector = function(target, list) {
<   return _.extend(_.sample(list),{targetStatus : "distrClass3"});
< };
< 
< 
498,510c278,300
< 
< 
< // // readjusts trueX and trueY values based on the objLocation and width and height of image (objImage)
< // game_core.prototype.getTrueCoords = function (coord, objLocation, objImage) {
< //   var trueX = this.getPixelFromCell(objLocation.gridX, objLocation.gridY).centerX - objImage.width/2;
< //   var trueY = this.getPixelFromCell(objLocation.gridX, objLocation.gridY).centerY - objImage.height/2;
< //   if (coord == "xCoord") {
< //     return trueX;
< //   }
< //   if (coord == "yCoord") {
< //     return trueY;
< //   }
< // };
---
> game_core.prototype.getTangramFromCell = function (gridX, gridY) {
>   for (i=0; i < this.objects.length; i++) {
>     if (this.objects[i].gridX == gridX && this.objects[i].gridY == gridY) {
>       var tangram = this.objects[i];
>       var tangramIndex = i;
>       // return tangram;
>       return i;
>     }
>   }
>   console.log("Did not find tangram from cell!");
> };
> 
> // readjusts trueX and trueY values based on the objLocation and width and height of image (objImage)
> game_core.prototype.getTrueCoords = function (coord, objLocation, objImage) {
>   var trueX = this.getPixelFromCell(objLocation.gridX, objLocation.gridY).centerX - objImage.width/2;
>   var trueY = this.getPixelFromCell(objLocation.gridX, objLocation.gridY).centerY - objImage.height/2;
>   if (coord == "xCoord") {
>     return trueX;
>   }
>   if (coord == "yCoord") {
>     return trueY;
>   }
> };
